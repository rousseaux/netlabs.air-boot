Advanced Binary to .OBJ version 1.01 manual.
(C) Copyright 1996 Pedro Gimeno Fortea. All rights reserved.

E-mail addresses: pgimeno@iname.com

LICENSE AGREEMENT AND WARRANTY DISCLAIMER

This program is distributed as "freeware". It's freely distributable in
its complete, unmodified form, by everyone except the "simtel.net"
archivers (Walnut Creek CDROM), who are not allowed to distribute it.

No fee of any kind may be charged to this program, except in the
following cases:

  - Distribution in a CD-ROM with other freeware/shareware software.

  - A bulletin board or other kind of associaton that charges a fee for
    membership. In this case, no additional payment should be required
    to obtain the program.

THIS PROGRAM COMES WITH NO WARRANTY. IN NO EVENT WILL THE AUTHOR BE
MADE RESPONSIBLE FOR ANY CONSEQUENCE THAT THE PROGRAM MAY CAUSE. IT IS
NOT LICENSED FOR USE IN ANY COUNTRY/STATE IN WHICH LAW DOES NOT ALLOW
TO DENY ALL WARRANTIES.


Description
-----------

The purpose of this program is to convert a given file to the standard
Object Module Format suitable for most DOS linkers which accept that
format, in order to embed the file as part of the executable. This is
valid for any file. In particular, it may replace utilities like BIN2DB,
allowing faster times for binary file embedding. Here are suggestions of
files to embed:

  - Font files
  - Picture files
  - Sprite files
  - Sound files
  - Text files
  - Drivers such as BGI (this program fully replaces BINOBJ and BGIOBJ)
  - Precalculated tables such as sine/cosine tables, etc.
  - Any other data files in general


Quickstart
----------

MKOBJ with no arguments will show the command-line options. If you are
going to use it with 32-bit software (such as Watcom etc) be sure to add
option /3 to force generation of 32-bit segments.

To install it, just copy MKOBJ.EXE and MKOBJ.INI in a directory of your
path.

For linking with Turbo Pascal:

  Turbo Pascal allows only external references for procedures, not for
  variables, so they must be always defined to be in a code segment. If
  you want to use them as data, either declare a variable and move the
  data from the procedure to the variable at initialization time, or use
  the data directly from the procedure at run time. You may want to take
  a look at BGILINK.PAS which comes with Turbo Pascal and Borland Pascal
  to see an example.

  The command line should look like:

    MKOBJ binfile objfile /c=tp /p=Procedure_name

  And the Pascal program or unit should include something like:

    {$L objfile}
    procedure Procedure_name; external;

  Remember that "binfile" must not exceed 64K, and if it is close to the
  64K barrier you may have to put it in a separate unit (each unit may
  be 64K in size). I think (not sure) that in certain old versions of TP
  you have to write the parameter /p=PROCEDURE_NAME with all letters in
  upper case to allow linking. In Borland Pascal 7.0 the case of public
  names is properly ignored.


For linking with Watcom C (32-bit):

  To link the file as data, the command line should look like:

    MKOBJ binfile objfile /3 /c=wdata /p=_Var_name

  (Note the "_" before Var_name, and remember that Var_name is case
  sensitive in C). In the program the declaration might look like:

    extern char Var_name[file_length];

  If the program is written in C++, the declaration should include a
  quoted "C" after extern:

    extern "C" char Var_name[file_length];

  To compile and link:

    WCL386 [options] c_module1 c_module2 ... objfile.obj

  I've not tried to link the file as code, although I'm quite sure it's
  possible.


For other languages, you'll probably need some docs on how to link
external modules and what are the segment names the linker expects.
Here are some tips:

  For assembly, you decide the segment name and properties and you have
  to link the file by yourself (I'm using this mode regularly).

  For TMT Pascal, segment name is not important. Just be sure to use /3
  in the command line. The same restriction as in Turbo Pascal that only
  procedures (not data) may be linked applies.

  For Turbo C, I think that the object file has to be put in the project
  file. I'm not sure, but maybe that segment names and groups depend on
  the memory model selected.

  For DJGPP and GAS, the object file has to be converted to .o format
  before linking (AFAIK the GNU linker LD does not link OMF) using a
  converter (I think it exists). In this case, using MKOBJ is perhaps
  worse than using a BIN2DB-like utility.


There are many of these! Why another one?
-----------------------------------------

I required a BINOBJ-like utility allowing full control over the segment
name, class name, alignment and the rest of the segment attributes. An
additional requirement was to allow files larger than 64K in a 32-bit
(USE32) segment.

After testing all of the utilities I was able to find in the SimTel
archives, I found none that matched all that requirements. One of them
was able to process files larger than 64K, but did so by generating
multiple segments and had no control over the segment properties. There
was another one that allowed full control on the segment properties,
except for the USE32 attribute, but had several drawbacks: no more than
64K (enough reason for me to refuse it), unfriendly command-line
interface and shareware (not free) status. None of the utilities I found
was able to generate 32-bit segments. So I felt that the time to create
one more had come.


General information
-------------------

All strings treated by the program are case-independent except for the
segment name, the class name and the public name. This is valid also for
the config file contents. If you find a violation to this rule, that is
a bug. Please report it to the E-mail address mentioned above. Also,
spaces are not important except for separating words, and the tabulator
means the same as a space character.

The program is designed to be run with a command line as short as
possible by means of a configuration file, but also flexible enough to
make it possible to specify all the required parameters on the command
line (becoming a long command line when used that way).

For batch and MAKE processing, an error level is returned for each
error that the program may produce. See the Error Levels section for
details.

The object file generated has a 'dependency' record which allows some
MAKE utilities to perform auto-dependency checks for the original input
file, useful for big projects.

For files larger than 65536 bytes, the default mode of operation is
32 bits. For shorter files it's 16 bits. It's possible to force 32-bits
mode even for files shorter than 64K, using option /3 (see the Command
line section). This is important because if the default mode does not
match the mode specified in the active segment definition an error will
occur.


Segment definitions and Public definitions
------------------------------------------

Both the command line and the configuration file admit the same syntax
for a segment or public definition. Here is the format for a segment
definition (very similar to an ASM segment declaration):

<segname> [SEGMENT] <use> <combine> <align> <dosseg> <class>

where:
  <segname> is the segment name. It must be the first word in the
  segment definition. Remember it's case sensitive, so write it in
  upper case to link with case-insensitive linkers.

  [SEGMENT] is the word SEGMENT that may be absent. It has no function:
  it may be present just to declare segments like in ASM.

  <use> is either USE16 or USE32. It must match the operation mode of
  the program (that is 16-bit for files <= 64K unless /3 specified in
  the command line, or 32-bit otherwise).

  <combine> can be:
    PUBLIC:  this segment will be joined to segments in other modules
             that have the same name.
    MEMORY:  same as PUBLIC.
    PRIVATE: this segment will not follow any special rule for joining
             to other segments.
    STACK:   same as PUBLIC, also sets SS:(E)SP to the last address in
             the segment.
    COMMON:  this segment will be put in the same address as the ones
             with the same name in other modules.

  Note that "AT address" is not supported because absolute segments
  are not allowed to contain data.

  <align> may be:

    BYTE:    No aligment at all.
    WORD:    The start of this segment will be aligned to an even
             address.
    DWORD:   Aligned to an address multiple of 4.
    PARA:    Aligned to an address multiple of 16.
    PAGE:    Aligned to an address multiple of 256.
    PAGE4:   Aligned to an address multiple of 4096. Not supported
             by most linkers. Supported by Phar Lap linkers.

  <dosseg> may be:

    DOSSEG:   Use DOS conventions for segment ordering.
    NODOSSEG: Don't force using DOS conventions for segment ordering.

  <class> may be any name enclosed in single quotes. For no class use
          an empty string (''). Remember that the class name is case
          sensitive and is not allowed to contain spaces.

          All segments belonging to the same class will be put
          together when linked.


The syntax for a public definition is:

  <public_name>[,address]

  where <public_name> is the case sensitive name to be declared as
  public in this object file, and <address> is the relative address for
  the public symbol, assumed to be 0 if omitted.

  The syntax for <address> is:

    number[<d>|<h>|<b>|<o>]

  The resulting number may range from 0 to 4294967295. The optional
  suffixes are <d> for decimal (default), <h> for hexadecimal, <b> for
  binary and <o> for octal.


Command line
------------

Here is the command line syntax for MKOBJ 1.01:

MKOBJ <binfile>[.bin] [objfile[.obj]] [options]

where <binfile> is the input file (default extension is .bin), and
<objfile> is the output file (same name as <binfile> with extension
.OBJ if omitted). Default extension for <objfile> is .OBJ.

IMPORTANT NOTE: The options must be always specified *after* the file
name(s).

Wildcards are allowed for the input file only if they reference a
unique file. If the wildcards match more than one file then an
error will be reported. Wildcards are not allowed for the output
file.

[options] may be:

/? : show help (also shown when MKOBJ is invoked with no parameters).
/3 : force USE32 mode even for files <= 64K.
/w : warn before overwriting the target file (default is no warning!).
/q : quiet mode (no messages if successful conversion).
/c=configkey : to select a segment configuration from the config file.
/s=SegName [SEGMENT] [use] [align] [combine] [dosseg] [class] : Define
     fully or partially the segment properties. See the previous section
     for details.
/p=pubdef[,offset] : to declare a public symbol at the given relative
     location <offset> (zero if omitted).

Examples:

  MKOBJ sincos /3 /w /q /s=code32 segment use32 para public 'CODE'
    nodosseg /p=SineTable,0 /p=CosineTable,200h

  This command line takes SINCOS.BIN as input and generates SINCOS.OBJ
  in (forced) 32-bit mode with the segment properties specified, warns
  before overwriting SINCOS.OBJ, operates in quiet mode except in case
  of error, and generates two public symbols, SineTable at offset 0 and
  CosineTable at offset 512 (200h).

  MKOBJ text.txt linktext /c=tp /p=Text

  This command line takes TEXT.TXT as input and generates LINKTEXT.OBJ
  as output. The segment properties will be taken from the config key
  TP (assuming that this definition has not been changed in the default
  MKOBJ.INI supplied with this program). The public name Text is used.
  No overwrite warning will be generated if LINKTEXT.OBJ already exists
  in this directory. If TEXT.TXT is longer than 64K an error will occur
  since the default mode will be then 32-bits and the segment properties
  for the TP entry in the config file specify USE16, not matching the
  default mode.


Configuration files
-------------------

The configuration file is a .INI-style regular text file. It's searched
for as follows:

If the file MKOBJ.INI exists in the same directory as the main program
executable (MKOBJ.EXE), it will be the main configuration file.
Otherwise, if the file SSTOOLS.INI exists in a directory of the path,
then it will be the main configuration file.

If none of these files exists, no default options will be defined.

There are two sections that are recognized in the configuration file:
the segment definitions section and the file chain section. All other
sections will be ignored. (A section is a part of the text file that
begins with a line containing a name enclosed in square brackets).

There is a sample MKOBJ.INI file supplied with the program that may
be used for reference.

The segment definition section name is:

  [MKOBJ 1.0 SEGDEF]

No spaces may appear between the "[" and the word "MKOBJ", nor between
the word "SEGDEF" and the "]". Under the segment definition section,
the following keys may appear:

  default=<segment definition>

This may be used to declare the default segment definition. There may
be two of these keys, one containing a USE32 segment and another with
a USE16 one, defining the defaults for the respective modes. Below
each of them, the following key may appear:

  default public=<public definition>

Note that all of the default public definitions for the currently
selected segment use will be included as publics in the object file,
so this option is not recommended except perhaps in a local file.
If you find an interesting use for it, let me know.

  <configname>=<segment definition>

where <configname> is a name of your choice with no spaces in it,
except "default" which is not allowed (obviously it's reserved for
the default definitions mentioned above). This key is used to
declare a segment definition which may be chosen from the command
line using the /c=<configname> option. This allows to create specific
definitions for particular projects. Note that this segment definition
may override only the properties that it specifies, leaving the rest
as they were the last time the same (or the DEFAULT) key was used.

  <configname> public=<public definition>

This defines the public(s) for <configname>. Several keys with the
same name may appear, in which case all of them will be included.
Some public names may also be added in the command line.

The chain section is used to continue processing options from
another file. When the chain file is found, processing continues
with that file, not returning to the original file. The section name
is:

  [MKOBJ 1.0 CHAIN]

The chain section may include the following keys:

  file=<pathname.ext>

Any path may be specified there. The pathname can be either absolute
or relative, i.e. it may implicitly reference the currently active
directory or any directory within when no absolute path is specified,
or it may contain a full absolute pathname.

  search=<environment_var>,<filename>

The given <environment_var> is taken as a semicolon-separated
directory list containing directories in which to search for
<filename>. In case the file is found in one of those directories,
it behaves as a "file=" key.


Error levels
------------

When the execution is completed, MKOBJ returns the resulting status to
DOS as an exit code that some MAKE utilities may see, and is also visible
from within .BAT files. Essentially, a 0 indicates that conversion was
successful, and any number greater than 0 means that no valid output file
was generated.

  0 - Successful conversion.
  1 - Command line help shown (maybe due to an invalid option passed).
      It also indicates that wildcards specified multiple input files.
  2 - Input file not found.
  4 - Too many open files. Each configuration file that is called is kept
      open until config file reading ends, so this condition means either
      that config file nesting exceeds the maximum allowed open files or
      that a cyclic reference was made in the CHAIN section.
 60 - An offset that does not fit in 16-bit was specified in a public
      definition belonging to a 16-bit segment.
 61 - No use mode defined. At least one USE16 or USE32 clause must be
      present in the selected key if no DEFAULT keys are given.
 62 - The use mode defined in the segment definition does not match the
      currently active mode. That is, if file > 64K or /3 is used, and
      the use mode is USE16, this error will be generated. It also will
      if file <= 64K and no /3 switch is used and the use mode is USE32.
101 - Disk became full when writing the output file. (Note: the portion
      of the output file that was written will not be deleted).

Other errorlevels may indicate miscellaneous errors that may arise such
as error 3 (Path not found), and other error codes may be defined in the
future.

Remember that 'IF ERRORLEVEL n' in a batch file means 'if the exit code
is greater or equal than n'. A tip on how to match for exact errorlevels
from within batch files is shown here:

  IF ERRORLEVEL 1 IF NOT ERRORLEVEL 2 <command>

This will trap only exit code 1. If you are using 4DOS or NDOS, you may
also use:

  IF %?==n <command>

to trap exit code n, since %? returns the exit code under 4DOS/NDOS.


Limitations
-----------

This version does not create 16-bit multisegment objects for >64K
input files (it's limited to generating only 32-bit segments in such
cases). That limitation is unlikely to be removed in future versions.

Command-line switches (like /w) may not be specified in the config
file.

There's no possibility to remove the dependency list record. This
didn't seem to be useful, since it's a very little part of the total
file size, so the space saving is not mercy the effort. However, if
I am reported about linkers that do not admit that record, I might
add that option (maybe it would have taken less time to implement it
than to write this paragraph) :)

Another option that the program lacks is a force-16-bit-mode, that
would reject files larger than 64K instead of switching to 32-bit
mode automatically. However, the check for the selected use mode
solves the problem in most cases by now.


Known bugs
----------

There's no check for duplicate public names.

There's no check for the input and output files being the same
(if that's the case, the result is an invalid output file).

If you find any other bugs, please tell me.


Where to find last version
--------------------------

The last version will be uploaded to CCT's SimTel archive. The main URL is:

ftp://ftp.coast.net/Coast/msdos/pgmutil/

but there are CCT SimTel mirrors worldwide.

The file name is always MKOBJxxx.ZIP, where xxx is the version number. The
file size for version 1.01 should be 20036 if the original distribution
file has not been modified.


Contacting the author
---------------------

By E-mail, to the following address:

        pgimeno@iname.com

For comments, bug reports, corrections to this manual, etc. don't
hesitate to write to me. Note that I'm Spanish, so my English may sound
strange sometimes. Comments about mistakes or weird sentences in this
document for that reason will be appreciated.

Also I'd appreciate if you send me an E-mail to keep track of whether the
program is being used or not (I received no E-mail with version 1.00).


Revision History
----------------

[0.1]   First alpha version.

[1.00]  First public version. No relevant changes: the alpha version
        was already quite stable.

[1.01]  Bug fixes in directory handling. Improved file error handling.
